EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe_ -- emu8086 assembler version: 4.08  
 
[ 23/06/2022  --  21:37:32 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       writeln macro bien1
[   2]        :                                       LOCAL bien2 ;local label
[   3]        :                                       mov ah,09
[   4]        :                                       lea dx, bien1
[   5]        :                                       int 21h
[   6]        :                                       mov ah,02h
[   7]        :                                       mov dl, 0ah
[   8]        :                                       int 21h
[   9]        :                                       mov dl, 0dh
[  10]        :                                       int 21h
[  11]        :                                       writeln endm
[  12]        :                                       dseg segment
[  13]        :                                       
[  14]        :                                       
[  15]    0000: 43 68 75 6F 6E 67 20 74 72 69 6E 67   tbao db "Chuong tring so sanh oldpass va newpass$"
                20 73 6F 20 73 61 6E 68 20 6F 6C 64 
                70 61 73 73 20 76 61 20 6E 65 77 70 
                61 73 73 24                         
[  16]    0028: 30 31 32 33 34 35 36 37 38 39         oldpass db "0123456789"
[  17]    0032: 30 31 32 33 34 35 36 37 38 39         newpass db "0123456789"
[  18]    003C: 48 61 69 63 68 75 6F 69 20 67 69 6F   tbao1 db "Haichuoi giong nhau $"
                6E 67 20 6E 68 61 75 20 24          
[  19]    0051: 48 61 69 63 68 75 6F 69 20 6B 68 6F   tbao2 db "Haichuoi khong giong nhau $"
                6E 67 20 67 69 6F 6E 67 20 6E 68 61 
                75 20 24                            
[  20]        :                                       dseg ends
[  21]        :                                       cseg segment
[  22]        :                                       assume cs:cseg, ds:dseg, es:dseg
[  23]        :                                       
[  24]    0070: B8 00 00                              begin: mov ax, dseg
[  25]    0073: 8E D8                                 mov ds, ax
[  26]    0075: 8E C0                                 mov es, ax
[  27]    0077: B4 09 BA 00 00 CD 21 B4 02 B2 0A CD   writeln  tbao
                21 B2 0D CD 21                      
[  28]    0088: FC                                    cld ; chonchieu xu ly chuoi
[  29]    0089: B9 0A 00                              mov cx, 10 ; so ky tu/so byte can so sanh
[  30]    008C: BE 28 00                              lea si, oldpass; (DS:SI)--> dia chi cua chuoi nguon
[  31]    008F: BF 32 00                              lea di, newpass; (ES:DI)--> dia chi cua chuoi dich
[  32]    0092: F3 A6                                 repe cmpsb ; so sanh tung ky tu/byte
[  33]        :                                       
[  34]    0094: 74 13                                 je intb1
[  35]    0096: B4 09 BA 51 00 CD 21 B4 02 B2 0A CD   writeln tbao2
                21 B2 0D CD 21                      
[  36]    00A7: EB 11                                 jmp thoat
[  37]    00A9: B4 09 BA 3C 00 CD 21 B4 02 B2 0A CD   intb1: writeln tbao1
                21 B2 0D CD 21                      
[  38]    00BA:                                       thoat:
[  39]    00BA: B4 08                                 mov ah,08h
[  40]    00BC: CD 21                                 int 21h
[  41]    00BE: B4 4C                                 mov ah, 4ch
[  42]    00C0: CD 21                                 int 21h
[  43]        :                                       cseg ends
[  44]        :                                       end begin
[  45]        :                                       
[  46]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: C2      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: B4      -   check sum (l.byte)
0013: DE      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 07      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 07      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
