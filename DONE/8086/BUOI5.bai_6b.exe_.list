EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
BUOI5.bai_6b.exe_ -- emu8086 assembler version: 4.08  
 
[ 06/06/2022  --  19:22:41 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       inchuoi MACRO chuoi
[   2]        :                                       MOV AH, 9h
[   3]        :                                       LEA DX, chuoi
[   4]        :                                       INT 21h
[   5]        :                                       ENDM
[   6]        :                                       DSEG SEGMENT
[   7]    0000: 48 61 79 20 6E 68 61 70 20 31 20 6B   msg1 DB "Hay nhap 1 ky tu: $"
                79 20 74 75 3A 20 24                
[   8]    0013: 4D 61 20 41 53 43 49 49 20 6F 20 64   msg2 DB "Ma ASCII o dang Hex: $"
                61 6E 67 20 48 65 78 3A 20 24       
[   9]    0029: 0A 0D 24                              xdong DB 10, 13, ‘$’
[  10]    002C: 00                                    kytu DB ?
[  11]        :                                       DSEG ENDS
[  12]        :                                       CSEG SEGMENT
[  13]        :                                       ASSUME CS:CSEG, DS:DSEG
[  14]    0030: B8 00 00                              begin: MOV AX, DSEG
[  15]    0033: 8E D8                                 MOV DS, AX
[  16]    0035: B4 09 BA 00 00 CD 21                  inchuoi msg1
[  17]    003C: B4 01                                 MOV AH, 01h
[  18]    003E: CD 21                                 INT 21h
[  19]    0040: A2 2C 00                              MOV kytu, AL ; c?t ký t? nh?n du?c
[  20]    0043: B4 09 BA 29 00 CD 21                  inchuoi xdong
[  21]    004A: B4 09 BA 13 00 CD 21                  inchuoi msg2
[  22]    0051: 8A 3E 2C 00                           MOV BH, kytu ; Ký t? c?n in
[  23]    0055: E8 0E 00                              CALL hex_out
[  24]    0058: B4 02                                 MOV AH, 02 ; in ra ký t? h sau s? Hex
[  25]    005A: B2 68                                 MOV DL, 'h'
[  26]    005C: CD 21                                 INT 21h
[  27]    005E: B4 01                                 MOV AH, 01
[  28]    0060: CD 21                                 INT 21h
[  29]    0062: B4 4C                                 MOV AH, 4Ch ; thoat kh?i chuong trình
[  30]    0064: CD 21                                 INT 21h
[  31]        :                                       
[  32]    0066:                                       hex_out PROC
[  33]    0066: B9 04 00                              MOV CX, 4
[  34]    0069: 51                                    xuat:PUSH CX
[  35]    006A: B1 04                                 MOV CL, 4
[  36]    006C: 8A D7                                 MOV DL, BH
[  37]    006E: D2 EA                                 SHR DL, CL
[  38]    0070: 80 FA 09                              CMP DL, 09h
[  39]    0073: 77 05                                 JA nhan
[  40]    0075: 80 C2 30                              ADD DL, 30h ; Ð?i thành ký s? ‘0’-‘9’
[  41]    0078: EB 03                                 JMP inra
[  42]    007A: 80 C2 37                              nhan:ADD DL, 37h ; Ð?i thành ký t? ‘A-‘F’
[  43]    007D: B4 02                                 inra:MOV AH, 02h ; In ra màn hình ký t? dã d?i
[  44]    007F: CD 21                                 INT 21h
[  45]        :                                       
[  46]        :                                       
[  47]    0081: D3 E3                                 SHL BX, CL ; Quay trái BX 4 bit
[  48]    0083: 59                                    POP CX
[  49]    0084: E2 E3                                 LOOP xuat
[  50]    0086: C3                                    RET
[  51]        :                                       hex_out ENDP
[  52]        :                                       CSEG ENDS
[  53]        :                                       END begin
[  54]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 87      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 6E      -   check sum (l.byte)
0013: 95      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 03      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 03      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
