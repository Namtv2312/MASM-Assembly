EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
GiaiThua.exe_ -- emu8086 assembler version: 4.08  
 
[ 11/07/2022  --  12:36:50 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       inchuoi macro chuoi
[   3]        :                                       mov ah,9
[   4]        :                                       lea dx,chuoi
[   5]        :                                       int 21h
[   6]        :                                       endm
[   7]        :                                       .stack 100h
[   8]        :                                       .data
[   9]    0100: 00 00                                 y dw ?
[  10]    0102: 00 00                                 x dw ?
[  11]        :                                       
[  12]    0104: 0A 0D 24                              xdong db 10,13,"$"
[  13]        :                                       
[  14]    0107: 0A 0D 4E 68 61 70 20 6E 20 3D 20 24   msg4 db 10,13,"Nhap n = $"
                                                    
[  15]    0113: 0A 0D 6E 21 20 3D 20 24               msg5 db 10,13,"n! = $"
[  16]    011B: 0A 0D 56 75 69 20 6C 6F 6E 67 20 6E   err db 10,13,"Vui long nhap so khong am $"
                68 61 70 20 73 6F 20 6B 68 6F 6E 67 
                20 61 6D 20 24                      
[  17]        :                                       .code
[  18]    0140:                                       main proc
[  19]    0140: B8 10 00                              mov ax,@data
[  20]    0143: 8E D8                                 mov ds,ax
[  21]        :                                       
[  22]    0145: C7 06 02 00 00 00                     mov x,0
[  23]    014B: C7 06 00 00 00 00                     mov y,0
[  24]    0151: BB 0A 00                              mov bx,10
[  25]        :                                       
[  26]        :                                       ;Nhap n
[  27]        :                                       
[  28]    0154: B4 09 BA 07 00 CD 21                  inchuoi msg4
[  29]    015B:                                       input:
[  30]    015B: B4 01                                 mov ah,1
[  31]    015D: CD 21                                 int 21h
[  32]        :                                       
[  33]    015F: 3C 0D                                 cmp al,13
[  34]    0161: 74 19                                 je solve
[  35]        :                                       
[  36]    0163: 3C 30                                 cmp al, 30h
[  37]    0165: 72 4E                                 jb error
[  38]    0167: 2C 30                                 sub al,30h
[  39]        :                                       
[  40]    0169: 32 E4                                 xor ah,ah
[  41]    016B: A3 00 00                              mov y,ax
[  42]    016E: A1 02 00                              mov ax,x
[  43]    0171: F7 E3                                 mul bx
[  44]    0173: 03 06 00 00                           add ax,y
[  45]    0177: A3 02 00                              mov x,ax
[  46]    017A: EB DF                                 jmp input
[  47]    017C:                                       solve:
[  48]    017C: B8 00 00                              mov ax,0
[  49]    017F: 33 C9                                 xor cx,cx
[  50]    0181: 8B 0E 02 00                           mov cx,x
[  51]    0185: B4 09 BA 13 00 CD 21                  inchuoi msg5
[  52]    018C: B8 01 00                              mov ax,1
[  53]    018F: BB 01 00                              mov bx,1
[  54]    0192:                                       giaithua:
[  55]    0192: F7 E3                                 mul bx
[  56]    0194: 43                                    inc bx
[  57]    0195: 3B D9                                 cmp bx,cx
[  58]    0197: 7E F9                                 jle giaithua
[  59]    0199: 33 C9                                 xor cx,cx
[  60]    019B: BB 0A 00                              mov bx,10
[  61]    019E:                                       lappush:
[  62]    019E: F7 F3                                 div bx
[  63]    01A0: 83 C2 30                              add dx,30h
[  64]    01A3: 52                                    push dx
[  65]    01A4: 41                                    inc cx
[  66]    01A5: 3D 00 00                              cmp ax,0
[  67]    01A8: 75 F4                                 jne lappush
[  68]    01AA:                                       hienthi:
[  69]    01AA: 5A                                    pop dx
[  70]    01AB: B4 02                                 mov ah,2
[  71]    01AD: CD 21                                 int 21h
[  72]    01AF: E2 F9                                 loop hienthi e
[  73]        :                                       
[  74]        :                                       
[  75]    01B1:                                       thoat:
[  76]    01B1: B4 4C                                 mov ah,4ch
[  77]    01B3: CD 21                                 int 21h
[  78]        :                                       main endp
[  79]    01B5:                                       error:
[  80]    01B5: B4 09 BA 1B 00 CD 21                  inchuoi  err
[  81]    01BC: EB 9D                                 jmp input
[  82]        :                                       end main
[  83]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: BE      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: CC      -   check sum (l.byte)
0013: C8      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 14      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 14      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
