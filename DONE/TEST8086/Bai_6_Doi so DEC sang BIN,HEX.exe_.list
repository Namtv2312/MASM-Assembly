EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Bai_6_Doi so DEC sang BIN,HEX.exe_ -- emu8086 assembler version: 4.08  
 
[ 10/07/2022  --  20:57:03 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       inchuoi macro chuoi
[   2]        :                                       mov ah, 9
[   3]        :                                       lea dx,chuoi
[   4]        :                                       int 21h
[   5]        :                                       endm
[   6]        :                                       .stack 100h
[   7]        :                                       .data
[   8]    0100: 4E 68 61 70 20 4D 53 56 3A 20 24      msg1 db "Nhap MSV: $"
[   9]    010B: 0A 0D 48 6F 20 74 65 6E 20 73 69 6E   msg2 db 10,13,"Ho ten sinh vien: Nguyen Thi Quynh$$"
                68 20 76 69 65 6E 3A 20 4E 67 75 79 
                65 6E 20 54 68 69 20 51 75 79 6E 68 
                24 24                               
[  10]    0131: 0A 0D 21 21 21 54 68 6F 6E 67 20 74   msg3 db 10,13,"!!!Thong tin sai$"
                69 6E 20 73 61 69 24                
[  11]    0144: 0A 0D 24                              xdong db 10,13,"$"
[  12]    0147: 41 54 31 36 30 36 33 39               msv1 db "AT160639"
[  13]    014F: 61 74 31 36 30 36 33 39               msv2 db "at160639"
[  14]    0157: 64 00 24 24 24 24 24 24 24 24 24 24   str db 100,?,100 dup('$')
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24                   
[  15]    01BD: 0A 0D 4E 68 61 70 20 31 20 73 6F 20   msg4 db 10,13,"Nhap 1 so he thap phan: $"
                68 65 20 74 68 61 70 20 70 68 61 6E 
                3A 20 24                            
[  16]    01D8: 0A 0D 44 6F 69 20 72 61 20 63 6F 20   msg5 db 10,13,"Doi ra co so 16 la: $"
                73 6F 20 31 36 20 6C 61 3A 20 24    
[  17]    01EF: 0A 0D 44 6F 69 20 72 61 20 68 65 20   msg6 db 10,13,"Doi ra he nhi phan 16 bit la: $"
                6E 68 69 20 70 68 61 6E 20 31 36 20 
                62 69 74 20 6C 61 3A 20 24          
[  18]    0210: 00 00                                 x dw 0
[  19]    0212: 00 00                                 y dw 0
[  20]        :                                       .code
[  21]    0220:                                       main proc
[  22]    0220: B8 10 00                              mov ax,@data
[  23]    0223: 8E D8                                 mov ds,ax
[  24]    0225: 8E C0                                 mov es,ax
[  25]        :                                       ;nhap msv
[  26]    0227:                                       nhapmsv:
[  27]    0227: B4 09 BA 00 00 CD 21                  inchuoi msg1
[  28]        :                                       ;nhap chuoi
[  29]    022E: B4 0A                                 mov ah,0Ah
[  30]    0230: BA 57 00                              lea dx,str
[  31]    0233: CD 21                                 int 21h
[  32]    0235: 33 C9                                 xor cx,cx
[  33]    0237: BB 08 00                              mov bx,8
[  34]    023A: 8A 0E 58 00                           mov cl,[str+1]
[  35]    023E: 3B D9                                 cmp bx,cx
[  36]    0240: 77 19                                 ja nhaplai
[  37]    0242:                                       kiemtra:
[  38]    0242: FC                                    cld
[  39]    0243: 8A 0E 58 00                           mov cl,[str+1]
[  40]    0247: BE 59 00                              lea si,str+2
[  41]    024A: BF 47 00                              lea di,msv1
[  42]    024D: F3 A6                                 repe cmpsb
[  43]    024F: 74 1A                                 je intb1
[  44]    0251: BE 59 00                              lea si,str+2
[  45]    0254: BF 4F 00                              lea di,msv2
[  46]    0257: F3 A6                                 repe cmpsb
[  47]    0259: 74 10                                 je intb1
[  48]    025B:                                       nhaplai:
[  49]    025B: B4 09 BA 31 00 CD 21                  inchuoi msg3
[  50]    0262: B4 09 BA 44 00 CD 21                  inchuoi xdong
[  51]    0269: EB BC                                 jmp nhapmsv
[  52]    026B:                                       intb1:
[  53]    026B: B4 09 BA 0B 00 CD 21                  inchuoi msg2
[  54]        :                                       ;nhap so
[  55]    0272: B4 09 BA BD 00 CD 21                  inchuoi msg4
[  56]    0279: BB 0A 00                              mov bx,10
[  57]    027C:                                       nhap:
[  58]    027C: B4 01                                 mov ah,1
[  59]    027E: CD 21                                 int 21h
[  60]    0280: 3C 0D                                 cmp al,13
[  61]    0282: 74 15                                 je he_nhiphan
[  62]    0284: 2C 30                                 sub al,30h
[  63]    0286: 32 E4                                 xor ah,ah
[  64]    0288: A3 12 01                              mov y,ax
[  65]    028B: A1 10 01                              mov ax,x
[  66]    028E: F7 E3                                 mul bx
[  67]    0290: 03 06 12 01                           add ax,y
[  68]    0294: A3 10 01                              mov x,ax
[  69]    0297: EB E3                                 jmp nhap
[  70]    0299:                                       he_nhiphan:
[  71]    0299: B4 09 BA D8 00 CD 21                  inchuoi msg5
[  72]    02A0: 33 DB                                 xor bx,bx
[  73]    02A2: 8B 1E 10 01                           mov bx,x
[  74]    02A6: B9 10 00                              mov cx,16
[  75]    02A9:                                       hienthi_he2:
[  76]    02A9: B2 30                                 mov dl,30h
[  77]    02AB: D1 E3                                 shl bx,1 ;day bit cao nhat cua bx vao co CF
[  78]    02AD: 80 D2 00                              adc dl,0  ;dl = dl+0+CF
[  79]    02B0: B4 02                                 mov ah,2
[  80]    02B2: CD 21                                 int 21h
[  81]    02B4: E2 F3                                 loop hienthi_he2
[  82]    02B6:                                       hr_thapluc:
[  83]    02B6: B4 09 BA EF 00 CD 21                  inchuoi msg6
[  84]    02BD: A1 10 01                              mov ax,x
[  85]    02C0: 33 C9                                 xor cx,cx
[  86]    02C2:                                       chuyen_he16:
[  87]    02C2: 33 D2                                 xor dx,dx
[  88]    02C4: B3 10                                 mov bl,16
[  89]    02C6: F7 F3                                 div bx
[  90]    02C8: 83 FA 09                              cmp dx,9
[  91]    02CB: 77 05                                 ja chucai
[  92]    02CD: 83 C2 30                              add dx,30h
[  93]    02D0: EB 03                                 jmp chuso
[  94]    02D2:                                       chucai:
[  95]    02D2: 83 C2 37                              add dx,37h ;dua ve chu
[  96]    02D5:                                       chuso:
[  97]    02D5: 52                                    push dx
[  98]    02D6: 41                                    inc cx
[  99]    02D7: 3D 00 00                              cmp ax,0
[ 100]    02DA: 75 E6                                 jne chuyen_he16
[ 101]    02DC:                                       hienthi_he16:
[ 102]    02DC: 5A                                    pop dx
[ 103]    02DD: B4 02                                 mov ah,2
[ 104]    02DF: CD 21                                 int 21h
[ 105]    02E1: E2 F9                                 loop hienthi_he16
[ 106]    02E3:                                       thoat:
[ 107]    02E3: B4 4C                                 mov ah,4ch
[ 108]    02E5: CD 21                                 int 21h
[ 109]        :                                       main endp
[ 110]        :                                       end main
[ 111]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: E7      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 04      -   check sum (l.byte)
0013: 57      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 22      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 22      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
